#! /usr/bin/env python
"""
    Listest to gsplines and plot them
"""
from gsplines_msgs.msg import JointGSpline
from gsplines_msgs.msg import FollowJointGSplineActionGoal

import rospy
import rostopic
import threading
from trajectory_msgs.msg import JointTrajectory
from gsplines_ros import joint_gspline_msg_to_gspline
from matplotlib import pyplot as plt
import numpy as np
import matplotlib
import gsplines
import gsplines.plot
import matplotlib.animation as animation


class Animation:
    def __init__(self, _codom_dim: int, _up_to_deriv: int, _step: float):

        self.lock_ = threading.Lock()

        self.up_to_deriv_ = _up_to_deriv
        self.codom_dim_ = _codom_dim

        self.step_ = _step

        self.fig_, self.axis_ = plt.subplots(
            _up_to_deriv+1, _codom_dim)

        self.curve_container_ = [gsplines.plot.CurveVsTime(
            _codom_dim) for _ in range(0, _up_to_deriv+1)]

        for i, cvt in enumerate(self.curve_container_):
            cvt.associate_axis(self.axis_[i, :])

        self.curve_ = None

    def plot_curve(self, _q: gsplines.GSpline):

        with self.lock_:
            self.curve_ = _q

    def plt_func(self, _):
        """Function for for adding data to axis.

        Args:
            _ : Dummy variable that is required for matplotlib animation.

        Returns:
            Axes object for matplotlib
        """
        with self.lock_:
            if self.curve_ is not None:
                curve = self.curve_
                for cvt in self.curve_container_:
                    cvt.update(curve, self.step_)
                    curve = curve.deriv()
                for i in range(0, self.up_to_deriv_+1):
                    for j in range(0, self.codom_dim_):
                        gsplines.plot.fix_to_lines(self.axis_[i, j])

    def _plt(self):
        """Function for initializing and showing matplotlib animation."""
        self.ani = animation.FuncAnimation(
            self.fig_, self.plt_func, interval=1)
        plt.show()


class Node:
    """ Node class, that plots a gspline"""

    def __init__(self):
        rospy.init_node('gsplines_plotter')
        self.params = {}
        self.params['input_topic'] = "input_gspline"
        self.params['plot_up_to_derivative'] = 3
        self.params['plot_step'] = 0.1
        self.params['title'] = "gspline plot"
        matplotlib.use("Qt5agg")

        for key, value in self.params.items():
            self.params[key] = rospy.get_param('~'+key, value)

        self.ani = Animation(7, 3, self.params['plot_step'])

        topic_type, _, _ = rostopic.get_topic_class(self.params['input_topic'])

        if topic_type is JointGSpline:
            self.subs_ = rospy.Subscriber(
                self.params['input_topic'], JointGSpline, self.callback_msg)
            rospy.loginfo('listeing gspline to topic \'' +
                          self.params['input_topic']+'\'' +
                          'of type JointGSpline')
        elif topic_type is FollowJointGSplineActionGoal:
            self.subs_ = rospy.Subscriber(
                self.params['input_topic'], FollowJointGSplineActionGoal,
                self.callback_goal)
            rospy.loginfo('listeing gspline to topic \'' +
                          self.params['input_topic']+'\'' +
                          'of type FollowJointGSplineActionGoal')
        else:
            rospy.logerr("Cannot plot type " + topic_type.__str__)

    def plot(self, _gspline):
        """ plot the gspline"""

    def callback_msg(self, _msg: JointGSpline):
        """ plot received message"""

        q = joint_gspline_msg_to_gspline(_msg)
        self.ani.plot_curve(q)

    def callback_goal(self, _msg: FollowJointGSplineActionGoal):
        """ plot received message"""
        self.callback_msg(_msg.goal.gspline)


def main():
    node = Node()
    thread = threading.Thread(target=rospy.spin, daemon=True)
    thread.start()
    node.ani._plt()


if __name__ == "__main__":
    main()
