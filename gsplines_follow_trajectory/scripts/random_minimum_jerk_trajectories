#! /usr/bin/env python
"""
    This is a generator of minimum jerk paths
"""
import numpy as np
import rospy
from control_msgs.msg import FollowJointTrajectoryAction
from gsplines.optimization import minimum_jerk_path
from gsplines_ros import gspline_to_follow_joint_trajectory_goal
from sensor_msgs.msg import JointState
from std_msgs.msg import Header
import actionlib
from actionlib_msgs.msg import GoalStatus


def get_actual_joint_position(_joint_names: list):
    """ get the state of the robot
    """

    try:
        joint_state_msg = rospy.wait_for_message(
            'joint_states', JointState, timeout=rospy.Duration(5.0))
    except rospy.ROSInterruptException:
        raise ValueError('cannot get the sate')

    list_of_pairs = dict(
        list(zip(joint_state_msg.name, joint_state_msg.position)))

    return np.array([list_of_pairs[name] for name in _joint_names])


def get_header_with_delay(_delay_seconds: float):
    if _delay_seconds < 1.0e-10:
        return Header()
    result = Header()
    result.stamp = rospy.Time.now() + rospy.Duration.from_sec(_delay_seconds)

    return result


def main():
    """
    Generic loop
    """
    rospy.init_node('random_minimum_jerk_motions')

    params = {}
    params['rate'] = 0.5
    params['control_step'] = 0.01
    params['number_of_waypoints'] = 3
    params['control_name'] = ''
    params['waypoint_radius'] = 0.05
    params['execution_time'] = 1.0
    params['persistent'] = True
    params['network_delay_milliseconds'] = 100

    for key, value in params.items():
        params[key] = rospy.get_param('~'+key, value)

    try:
        joint_names = rospy.get_param(params['control_name']+'/joints')
    except KeyError:
        rospy.logerr_once('no joint names defined on control. cannot proceed')
        return

    motion_action = actionlib.SimpleActionClient(
        params['control_name']+'/follow_joint_trajectory',
        FollowJointTrajectoryAction)

    rospy.loginfo("Waiting for action " +
                  params['control_name']+'/follow_joint_trajectory')
    server_is_up = motion_action.wait_for_server()
    if not server_is_up:
        rospy.logerr_once(
            'No action follow_joint_trajectory in namespace {:d}'.format(
                params['control_name']))
        return
    rospy.loginfo('Connected to the action server ' +
                  params['control_name']+'/follow_joint_trajectory')

    rate = rospy.Rate(params['rate'])

    initial_position = get_actual_joint_position(joint_names)
    codom_dim = len(initial_position)

    if rospy.has_param('~initial_position'):

        desired_initial_position = rospy.get_param('~initial_position')

        assert len(desired_initial_position) == codom_dim

        first_motion_waypoints = np.zeros((2, codom_dim))
        first_motion_waypoints[0, :] = initial_position
        first_motion_waypoints[1, :] = desired_initial_position
        first_motion = minimum_jerk_path(first_motion_waypoints)

        header = get_header_with_delay(
            params['network_delay_milliseconds']*1.0e-3)

        first_goal = gspline_to_follow_joint_trajectory_goal(
            first_motion, joint_names, rospy.Duration(0.01), header)

        goal_state = motion_action.send_goal_and_wait(first_goal)
        initial_position = desired_initial_position
        rate.sleep()

    while not rospy.is_shutdown():

        waypoints = np.random.rand(
            params['number_of_waypoints'], codom_dim)

        waypoints = (2.0*waypoints - 1.0) * params['waypoint_radius']

        waypoints += initial_position

        waypoints[0, :] = initial_position
        waypoints[-1, :] = initial_position

        trj = minimum_jerk_path(waypoints)
        trj = trj.linear_scaling_new_execution_time(params['execution_time'])

        header = get_header_with_delay(
            params['network_delay_milliseconds']*1.0e-3)

        goal = gspline_to_follow_joint_trajectory_goal(
            trj, joint_names, rospy.Duration(0.01), header)

        goal_state = motion_action.send_goal_and_wait(goal)

        if goal_state != GoalStatus.SUCCEEDED:
            rospy.logerr('Action did not succeeded :' +
                         motion_action.get_goal_status_text())
            if not params['persistent']:
                return

        initial_position = get_actual_joint_position(joint_names)

        rate.sleep()


if __name__ == '__main__':
    main()
